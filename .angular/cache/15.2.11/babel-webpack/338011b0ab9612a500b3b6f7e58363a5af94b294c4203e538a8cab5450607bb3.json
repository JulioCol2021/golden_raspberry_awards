{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MoviesService = /*#__PURE__*/(() => {\n  class MoviesService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'https://challenge.outsera.tech/api/movies';\n    }\n    // Obter filmes com filtros\n    getMovies(params) {\n      return this.http.get(this.baseUrl, {\n        params\n      }).pipe(tap(response => console.log('Movies data fetched successfully:', response)), catchError(error => this.handleError(error)));\n    }\n    // Anos com múltiplos vencedores\n    getYearsWithMultipleWinners() {\n      return this.http.get(`${this.baseUrl}?projection=years-with-multiple-winners`).pipe(tap(response => console.log('Years with multiple winners fetched successfully:', response)), catchError(error => this.handleError(error)));\n    }\n    // Estúdios com contagem de vencedores\n    getStudiosWithWinCount() {\n      return this.http.get(`${this.baseUrl}?projection=studios-with-win-count`).pipe(tap(response => console.log('Studios with win count fetched successfully:', response)), catchError(error => this.handleError(error)));\n    }\n    // Intervalo de prêmios\n    getWinIntervals() {\n      return this.http.get(`${this.baseUrl}?projection=max-min-win-interval-for-producers`).pipe(tap(response => console.log('Win intervals fetched successfully:', response)), catchError(error => this.handleError(error)));\n    }\n    // Manipulação de erros\n    handleError(error) {\n      console.error('API call failed:', error);\n      return throwError(() => new Error('Failed to fetch data from API. Please check the connection or API endpoint.'));\n    }\n  }\n  MoviesService.ɵfac = function MoviesService_Factory(t) {\n    return new (t || MoviesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  MoviesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MoviesService,\n    factory: MoviesService.ɵfac,\n    providedIn: 'root'\n  });\n  return MoviesService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}