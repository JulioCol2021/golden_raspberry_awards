{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\r\n * Serviço responsável por realizar chamadas para a API de filmes.\r\n * Este serviço gerencia os endpoints relacionados a filmes, estúdios e produtores.\r\n */\nexport let MoviesService = /*#__PURE__*/(() => {\n  class MoviesService {\n    /**\r\n     * Construtor do serviço.\r\n     * @param http Cliente HTTP para realizar requisições.\r\n     */\n    constructor(http) {\n      this.http = http;\n      /**\r\n       * URL base da API de filmes.\r\n       */\n      this.apiUrl = 'https://challenge.outsera.tech/api/movies';\n    }\n    /**\r\n     * Obtém a lista de filmes com base nos filtros fornecidos.\r\n     * @param page Número da página (iniciando em 0).\r\n     * @param size Número de itens por página.\r\n     * @param winner Filtra apenas filmes vencedores se definido como `true`.\r\n     * @param year Ano para filtrar os filmes (opcional).\r\n     * @returns Observable contendo a lista de filmes.\r\n     */\n    getMovies(page, size, winner, year) {\n      let params = new HttpParams().set('page', page.toString()).set('size', size.toString());\n      if (winner !== undefined) {\n        params = params.set('winner', winner.toString());\n      }\n      if (year !== undefined) {\n        params = params.set('year', year.toString());\n      }\n      return this.http.get(this.apiUrl, {\n        params\n      });\n    }\n    /**\r\n     * Obtém os anos com múltiplos vencedores.\r\n     * @returns Observable contendo os anos com múltiplos vencedores e suas contagens.\r\n     */\n    getYearsWithMultipleWinners() {\n      const params = new HttpParams().set('projection', 'years-with-multiple-winners');\n      return this.http.get(this.apiUrl, {\n        params\n      });\n    }\n    /**\r\n     * Obtém os estúdios com suas contagens de vitórias.\r\n     * @returns Observable contendo os estúdios e suas respectivas contagens de vitórias.\r\n     */\n    getStudiosWithWinCount() {\n      const params = new HttpParams().set('projection', 'studios-with-win-count');\n      return this.http.get(this.apiUrl, {\n        params\n      });\n    }\n    /**\r\n     * Obtém os intervalos máximos e mínimos de vitórias para produtores.\r\n     * @returns Observable contendo os dados de produtores e seus intervalos de vitórias.\r\n     */\n    getMaxMinWinIntervalForProducers() {\n      const params = new HttpParams().set('projection', 'max-min-win-interval-for-producers');\n      return this.http.get(this.apiUrl, {\n        params\n      });\n    }\n    /**\r\n     * Obtém filmes vencedores de um ano específico.\r\n     * @param year Ano para filtrar os filmes vencedores.\r\n     * @returns Observable contendo a lista de filmes vencedores do ano especificado.\r\n     */\n    getMoviesByYear(year) {\n      const params = new HttpParams().set('winner', 'true').set('year', year.toString());\n      return this.http.get(this.apiUrl, {\n        params\n      });\n    }\n  }\n  MoviesService.ɵfac = function MoviesService_Factory(t) {\n    return new (t || MoviesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  MoviesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MoviesService,\n    factory: MoviesService.ɵfac,\n    providedIn: 'root'\n  });\n  return MoviesService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}